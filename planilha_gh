
import os
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side, Protection
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.worksheet.datavalidation import DataValidation
from openpyxl.workbook.defined_name import DefinedName
from openpyxl.utils import get_column_letter

# =============================================================================
# CONFIGURA√á√ïES GLOBAIS
# =============================================================================
# ATEN√á√ÉO: O caminho abaixo foi configurado para o diret√≥rio de rede/drive "U:"
# conforme solicitado. Se o script for executado em um ambiente diferente,
# esta linha DEVE ser ajustada.
CAMINHO_SAIDA = "U:\\ACOMPANHAMENTO GH"
# CAMINHO_SAIDA = os.path.join(os.path.expanduser("~"), "Downloads") # Exemplo para salvar na pasta Downloads
NOME_ARQUIVO = "Planilha_ICMS_PISCOFINS_Apuracao.xlsx" # Nome do arquivo atualizado
CAMINHO_COMPLETO = os.path.join(CAMINHO_SAIDA, NOME_ARQUIVO)

PROTEGE_PERCENTUAL = 0.15  # 15% fixo e imut√°vel por legisla√ß√£o
PISCOFINS_ALIQUOTA = 0.0960 # 9.60%
PERIODO_PADRAO = datetime.now().strftime("%m/%Y")
RAZAO_SOCIAL_PADRAO = "NOME DA EMPRESA AQUI"
CNPJ_PADRAO = "00.000.000/0001-00"

# Al√≠quotas padr√£o para valida√ß√µes
ALIQUOTAS_ENTRADA = ["4%", "7%", "12%", "19%"]
ALIQUOTAS_SAIDA = ["12%", "19%"]
CLASSIFICACOES_ENTRADA = [
    "Compra de Mercadoria", 
    "Uso e Consumo", 
    "Combust√≠veis e Lubrificantes", 
    "Transfer√™ncia entre Empresas", 
    "Frete de Mercadorias"
]

QTD_LINHAS_PADRAO = 50 # Aumentado para 50 linhas para melhor usabilidade

# =============================================================================
# ESTILOS DA PLANILHA
# =============================================================================
class Estilos:
    FONTE_CABECALHO = Font(name='Calibri', size=11, bold=True, color="FFFFFF")
    PREENCHIMENTO_CABECALHO = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")

    FONTE_TITULO_SECAO = Font(name='Calibri', size=14, bold=True, color="1F4E78")
    PREENCHIMENTO_TITULO_SECAO = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")

    PREENCHIMENTO_EDITAVEL = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid") # Amarelo claro
    PREENCHIMENTO_TOTAL = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid") # Azul claro
    PREENCHIMENTO_ALERTA = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid") # Vermelho claro
    PREENCHIMENTO_DESTAQUE = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid") # Verde claro
    PREENCHIMENTO_PISCOFINS = PatternFill(start_color="DAE3F3", end_color="DAE3F3", fill_type="solid") # Azul muito claro

    BORDA_FINA = Border(
        left=Side(style='thin'), 
        right=Side(style='thin'),
        top=Side(style='thin'), 
        bottom=Side(style='thin')
    )
    BORDA_DUPLA_BAIXO = Border(
        left=Side(style='thin'), 
        right=Side(style='thin'),
        top=Side(style='thin'), 
        bottom=Side(style='double')
    )

    ALINHAMENTO_CENTRO = Alignment(horizontal='center', vertical='center', wrap_text=True)
    ALINHAMENTO_ESQUERDA = Alignment(horizontal='left', vertical='center', wrap_text=True)
    ALINHAMENTO_DIREITA = Alignment(horizontal='right', vertical='center', wrap_text=True)

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================
def add_named_range(wb, name: str, sheet_title: str, cell_ref: str):
    """
    Cria/atualiza um Nome Definido (Named Range) apontando para uma c√©lula.
    √ötil para referenciar c√©lulas em f√≥rmulas de outras abas.
    """
    try:
        attr_text = f"'{sheet_title}'!{cell_ref}"
        dn = DefinedName(name=name, attr_text=attr_text)
        
        # Remove o nome se j√° existir para evitar duplicatas
        if name in wb.defined_names:
            del wb.defined_names[name]
        
        wb.defined_names.append(dn)
    except Exception as e:
        print(f"‚ö† Aviso: N√£o foi poss√≠vel criar nome definido '{name}': {e}")


def adicionar_cabecalho_padrao(ws, titulo_aba):
    """
    Adiciona um cabe√ßalho padr√£o com informa√ß√µes da empresa e per√≠odo em uma aba.
    Retorna a pr√≥xima linha dispon√≠vel para conte√∫do.
    """
    ws.merge_cells('A1:H1')
    ws['A1'] = f"APURA√á√ÉO FISCAL - {titulo_aba}"
    ws['A1'].font = Font(name='Calibri', size=16, bold=True, color="1F4E78")
    ws['A1'].alignment = Estilos.ALINHAMENTO_CENTRO

    ws['A2'] = "Per√≠odo:"
    ws['B2'] = PERIODO_PADRAO
    ws['A3'] = "Raz√£o Social:"
    ws['B3'] = RAZAO_SOCIAL_PADRAO
    ws['A4'] = "CNPJ:"
    ws['B4'] = CNPJ_PADRAO

    for cell_ref in ['A2', 'A3', 'A4']:
        ws[cell_ref].font = Font(bold=True)

    return 6 # Retorna a linha onde o conte√∫do principal deve come√ßar


def configurar_validacao_dados(ws, celulas_alvo: str, lista_opcoes: list, titulo: str, mensagem_erro: str):
    """
    Configura uma valida√ß√£o de dados do tipo lista para um intervalo de c√©lulas.
    """
    # Cria a string da lista de op√ß√µes
    opcoes_str = ",".join(lista_opcoes)
    
    dv = DataValidation(
        type="list",
        formula1=f'"{opcoes_str}"',
        allow_blank=True,
        showDropDown=True
    )
    dv.prompt = f"Selecione {titulo}"
    dv.promptTitle = titulo
    dv.error = mensagem_erro
    dv.errorTitle = "Entrada Inv√°lida"
    ws.add_data_validation(dv)
    dv.add(celulas_alvo)


def proteger_celulas_formula(ws, linha_inicio_dados: int, qtd_linhas: int, colunas_formula: list, colunas_editaveis: list, max_col: int):
    """
    Define a prote√ß√£o de c√©lulas: bloqueia c√©lulas com f√≥rmulas e desbloqueia c√©lulas para entrada de dados.
    A prote√ß√£o da planilha deve ser aplicada separadamente no Excel, se desejado.
    """
    # Desbloqueia todas as c√©lulas por padr√£o (necess√°rio para que a prote√ß√£o de folha funcione)
    for r in range(1, ws.max_row + 1):
        for c in range(1, ws.max_column + 1):
            ws.cell(row=r, column=c).protection = Protection(locked=False)
            
    # Aplica o bloqueio apenas nas c√©lulas de f√≥rmula
    for r in range(linha_inicio_dados, linha_inicio_dados + qtd_linhas):
        for c in range(1, max_col + 1):
            cell = ws.cell(row=r, column=c)
            if c in colunas_formula:
                cell.protection = Protection(locked=True)
            # As c√©lulas edit√°veis j√° est√£o desbloqueadas pelo loop inicial
            
    # Bloqueia o cabe√ßalho e outras √°reas n√£o edit√°veis
    for r in range(1, linha_inicio_dados):
        for c in range(1, max_col + 1):
            ws.cell(row=r, column=c).protection = Protection(locked=True)

# =============================================================================
# CRIA√á√ÉO DA PLANILHA
# =============================================================================
print("üîÑ Iniciando cria√ß√£o da planilha de Apura√ß√£o Fiscal...")

# Cria o diret√≥rio de sa√≠da se n√£o existir
try:
    # No ambiente Windows do usu√°rio, o caminho deve ser: CAMINHO_SAIDA = "U:\\ACOMPANHAMENTO GH"
    os.makedirs(CAMINHO_SAIDA, exist_ok=True)
except Exception as e:
    print(f"‚ö† Aviso: N√£o foi poss√≠vel criar o diret√≥rio {CAMINHO_SAIDA}. O script continuar√°, mas verifique o caminho no Windows.")
    # Para o teste no sandbox, vamos usar um caminho tempor√°rio
    if not os.path.exists(CAMINHO_SAIDA):
        CAMINHO_SAIDA = os.path.join(os.path.expanduser("~"), "temp_output")
        os.makedirs(CAMINHO_SAIDA, exist_ok=True)
        CAMINHO_COMPLETO = os.path.join(CAMINHO_SAIDA, NOME_ARQUIVO)
        print(f"‚ö† Aviso: Usando caminho tempor√°rio para teste: {CAMINHO_COMPLETO}")


wb = Workbook()
wb.remove(wb.active) # Remove a aba padr√£o criada

# =============================================================================
# ABA 1: ENTRADAS (CR√âDITOS)
# =============================================================================
print("üìä Criando aba 'Entradas'...")
ws_entradas = wb.create_sheet("Entradas")
linha_inicial_entradas = adicionar_cabecalho_padrao(ws_entradas, "ENTRADAS (CR√âDITOS ICMS/PIS/COFINS)")
linha_atual_entradas = linha_inicial_entradas + 1

# Colunas: A(Data), B(Compet√™ncia), C(N¬∫ NF), D(Produto), E(Valor), F(Custo Mercadoria), G(Classifica√ß√£o), H(% ICMS), I(ICMS Cr√©dito), J(PIS/COFINS Cr√©dito), K(Indicador Cr√©dito), L(Observa√ß√µes)
cabecalhos_entradas = [
    "Data Entrada", "Compet√™ncia (mm/aaaa)", "N¬∫ NF", "Produto/Descri√ß√£o", "Valor da Nota (R$)",
    "Custo da Mercadoria (R$)", "Classifica√ß√£o", "% ICMS", "ICMS Cr√©dito (R$)", "PIS/COFINS Cr√©dito (R$)", "Indicador Cr√©dito", "Observa√ß√µes"
]

for col_num, cab in enumerate(cabecalhos_entradas, 1):
    c = ws_entradas.cell(row=linha_atual_entradas, column=col_num, value=cab)
    c.font = Estilos.FONTE_CABECALHO
    c.fill = Estilos.PREENCHIMENTO_CABECALHO
    c.alignment = Estilos.ALINHAMENTO_CENTRO
    c.border = Estilos.BORDA_FINA

linha_dados_inicio_entradas = linha_atual_entradas + 1
MAX_COL_ENTRADAS = len(cabecalhos_entradas)

# Preenche as linhas de dados com estilos e f√≥rmulas
for i in range(QTD_LINHAS_PADRAO):
    r = linha_dados_inicio_entradas + i
    
    # Colunas edit√°veis (amarelas)
    colunas_editaveis_entradas = [1, 2, 3, 4, 5, 6, 7, 8, 12] # A, B, C, D, E, F, G, H, L
    for col_idx in colunas_editaveis_entradas:
        cell = ws_entradas.cell(row=r, column=col_idx)
        cell.fill = Estilos.PREENCHIMENTO_EDITAVEL
        cell.border = Estilos.BORDA_FINA

    # Formata√ß√£o de n√∫meros e datas
    ws_entradas.cell(row=r, column=1).number_format = 'DD/MM/YYYY'
    ws_entradas.cell(row=r, column=2).number_format = 'MM/YYYY'
    ws_entradas.cell(row=r, column=5).number_format = '#,##0.00' # Valor da Nota
    ws_entradas.cell(row=r, column=6).number_format = '#,##0.00' # Custo da Mercadoria (NOVO)
    ws_entradas.cell(row=r, column=9).number_format = '#,##0.00' # ICMS Cr√©dito
    ws_entradas.cell(row=r, column=10).number_format = '#,##0.00' # PIS/COFINS Cr√©dito

    # Colunas de resultado (ICMS Cr√©dito, PIS/COFINS Cr√©dito, Indicador Cr√©dito)
    colunas_formula_entradas = [9, 10, 11] # I, J, K
    for col_idx in colunas_formula_entradas:
        ws_entradas.cell(row=r, column=col_idx).fill = Estilos.PREENCHIMENTO_TOTAL
        ws_entradas.cell(row=r, column=col_idx).border = Estilos.BORDA_FINA

    # I: ICMS Cr√©dito
    # =SE(E{r}<>""; SE(G{r}="Compra de Mercadoria"; E{r}*VALOR(SUBSTITUIR(H{r};"%";""))/100; 0); 0)
    formula_icms_credito = (
        f'=SE(E{r}<>"";'
        f'SE(G{r}="Compra de Mercadoria";'
        f'E{r}*VALOR(SUBSTITUIR(H{r};"%";""))/100;'
        f'0);'
        f'0)'
    )
    ws_entradas.cell(row=r, column=9).value = formula_icms_credito

    # J: PIS/COFINS Cr√©dito
    # =SE(E{r}<>""; SE(G{r}="Compra de Mercadoria"; E{r}*{PISCOFINS_ALIQUOTA}; 0); 0)
    formula_piscofins_credito = (
        f'=SE(E{r}<>"";'
        f'SE(G{r}="Compra de Mercadoria";'
        f'E{r}*{PISCOFINS_ALIQUOTA};'
        f'0);'
        f'0)'
    )
    ws_entradas.cell(row=r, column=10).value = formula_piscofins_credito
    ws_entradas.cell(row=r, column=10).fill = Estilos.PREENCHIMENTO_PISCOFINS

    # K: Indicador Cr√©dito
    # =SE(E{r}<>""; SE(G{r}<>"Compra de Mercadoria"; "Sem Cr√©dito"; "Com Cr√©dito"); "")
    formula_indicador_credito = (
        f'=SE(E{r}<>"";'
        f'SE(G{r}<>"Compra de Mercadoria";'
        f'"Sem Cr√©dito";'
        f'"Com Cr√©dito");'
        f'""'
    )
    ws_entradas.cell(row=r, column=11).value = formula_indicador_credito
    ws_entradas.cell(row=r, column=11).alignment = Estilos.ALINHAMENTO_CENTRO
    
    # Adiciona formata√ß√£o condicional para destacar "Sem Cr√©dito"
    # openpyxl n√£o suporta formata√ß√£o condicional diretamente, mas o Excel far√° isso.
    # A cor de fundo ser√° aplicada no Excel via regra de formata√ß√£o condicional.

# Adiciona tabela formatada
tab_entradas = Table(
    displayName="tbEntradas",
    ref=f"A{linha_atual_entradas}:{get_column_letter(MAX_COL_ENTRADAS)}{linha_dados_inicio_entradas + QTD_LINHAS_PADRAO - 1}"
)
tab_entradas.tableStyleInfo = TableStyleInfo(
    name="TableStyleMedium2", 
    showFirstColumn=False,
    showLastColumn=False, 
    showRowStripes=True, 
    showColumnStripes=False
)
ws_entradas.add_table(tab_entradas)

# Valida√ß√£o de dados para % ICMS
configurar_validacao_dados(
    ws_entradas,
    f"H{linha_dados_inicio_entradas}:H{linha_dados_inicio_entradas + QTD_LINHAS_PADRAO - 1}",
    ALIQUOTAS_ENTRADA,
    "% ICMS",
    "Valor inv√°lido! Selecione uma das al√≠quotas permitidas: 4%, 7%, 12% ou 19%"
)

# Valida√ß√£o de dados para Classifica√ß√£o
configurar_validacao_dados(
    ws_entradas,
    f"G{linha_dados_inicio_entradas}:G{linha_dados_inicio_entradas + QTD_LINHAS_PADRAO - 1}",
    CLASSIFICACOES_ENTRADA,
    "Classifica√ß√£o",
    "Valor inv√°lido! Selecione uma das classifica√ß√µes da lista."
)

# Valida√ß√£o de dados para Compet√™ncia (mm/aaaa)
dv_competencia = DataValidation(
    type="textLength",
    operator="equal",
    formula1="7",
    allow_blank=True
)
dv_competencia.prompt = "Formato: mm/aaaa"
dv_competencia.promptTitle = "Compet√™ncia"
dv_competencia.error = "Formato inv√°lido. Use mm/aaaa (ex: 01/2024)."
dv_competencia.errorTitle = "Compet√™ncia Inv√°lida"
ws_entradas.add_data_validation(dv_competencia)
dv_competencia.add(f"B{linha_dados_inicio_entradas}:B{linha_dados_inicio_entradas + QTD_LINHAS_PADRAO - 1}")

# Ajusta largura das colunas
ws_entradas.column_dimensions['A'].width = 14
ws_entradas.column_dimensions['B'].width = 18
ws_entradas.column_dimensions['C'].width = 12
ws_entradas.column_dimensions['D'].width = 30
ws_entradas.column_dimensions['E'].width = 18
ws_entradas.column_dimensions['F'].width = 25 # Custo da Mercadoria
ws_entradas.column_dimensions['G'].width = 30
ws_entradas.column_dimensions['H'].width = 10
ws_entradas.column_dimensions['I'].width = 20
ws_entradas.column_dimensions['J'].width = 25
ws_entradas.column_dimensions['K'].width = 18
ws_entradas.column_dimensions['L'].width = 30
ws_entradas.freeze_panes = f"A{linha_atual_entradas + 1}"

# =============================================================================
# ABA 2: SA√çDAS (D√âBITOS)
# =============================================================================
print("üìä Criando aba 'Sa√≠das'...")
ws_saidas = wb.create_sheet("Sa√≠das")
linha_inicial_saidas = adicionar_cabecalho_padrao(ws_saidas, "SA√çDAS (D√âBITOS ICMS/PIS/COFINS)")
linha_atual_saidas = linha_inicial_saidas + 1

# Colunas: A(Data), B(Compet√™ncia), C(N¬∫ NF), D(Produto), E(Valor), F(% ICMS), G(Benef√≠cio PROTEGE), H(ICMS D√©bito), I(PIS/COFINS D√©bito), J(Observa√ß√µes)
cabecalhos_saidas = [
    "Data Sa√≠da", "Compet√™ncia (mm/aaaa)", "N¬∫ NF", "Produto/Descri√ß√£o", "Valor da Nota (R$)",
    "% ICMS", "Venda com Benef√≠cio PROTEGE?", "ICMS D√©bito (R$)", "PIS/COFINS D√©bito (R$)", "Observa√ß√µes"
]

for col_num, cab in enumerate(cabecalhos_saidas, 1):
    c = ws_saidas.cell(row=linha_atual_saidas, column=col_num, value=cab)
    c.font = Estilos.FONTE_CABECALHO
    c.fill = Estilos.PREENCHIMENTO_CABECALHO
    c.alignment = Estilos.ALINHAMENTO_CENTRO
    c.border = Estilos.BORDA_FINA

linha_dados_inicio_saidas = linha_atual_saidas + 1
MAX_COL_SAIDAS = len(cabecalhos_saidas)

# Preenche as linhas de dados com estilos e f√≥rmulas
for i in range(QTD_LINHAS_PADRAO):
    r = linha_dados_inicio_saidas + i
    
    # Colunas edit√°veis (amarelas)
    colunas_editaveis_saidas = [1, 2, 3, 4, 5, 6, 7, 10] # A, B, C, D, E, F, G, J
    for col_idx in colunas_editaveis_saidas:
        cell = ws_saidas.cell(row=r, column=col_idx)
        cell.fill = Estilos.PREENCHIMENTO_EDITAVEL
        cell.border = Estilos.BORDA_FINA

    # Formata√ß√£o de n√∫meros e datas
    ws_saidas.cell(row=r, column=1).number_format = 'DD/MM/YYYY'
    ws_saidas.cell(row=r, column=2).number_format = 'MM/YYYY'
    ws_saidas.cell(row=r, column=5).number_format = '#,##0.00' # Valor da Nota
    ws_saidas.cell(row=r, column=8).number_format = '#,##0.00' # ICMS D√©bito
    ws_saidas.cell(row=r, column=9).number_format = '#,##0.00' # PIS/COFINS D√©bito

    # Colunas de resultado (ICMS D√©bito, PIS/COFINS D√©bito)
    colunas_formula_saidas = [8, 9] # H, I
    for col_idx in colunas_formula_saidas:
        ws_saidas.cell(row=r, column=col_idx).fill = Estilos.PREENCHIMENTO_TOTAL
        ws_saidas.cell(row=r, column=col_idx).border = Estilos.BORDA_FINA
    
    # H: ICMS D√©bito
    # Se Benef√≠cio=Sim E %ICMS=19%, usa 11% (base reduzida). Sen√£o, usa %ICMS normal.
    # =SE(E{r}<>""; SE(E{r}="19%"; SE(G{r}="Sim"; E{r}*0.11; E{r}*VALOR(SUBSTITUIR(F{r};"%";""))/100); E{r}*VALOR(SUBSTITUIR(F{r};"%";""))/100); 0)
    formula_icms_debito = (
        f'=SE(E{r}<>"";'
        f'SE(E{r}="19%";'
        f'SE(G{r}="Sim";'
        f'E{r}*0.11;' # 11% para 19% com PROTEGE
        f'E{r}*VALOR(SUBSTITUIR(F{r};"%";""))/100);' # Al√≠quota normal
        f'E{r}*VALOR(SUBSTITUIR(F{r};"%";""))/100);' # Al√≠quota normal
        f'0)'
    )
    ws_saidas.cell(row=r, column=8).value = formula_icms_debito

    # I: PIS/COFINS D√©bito
    # =SE(E{r}<>""; E{r}*{PISCOFINS_ALIQUOTA}; 0)
    formula_piscofins_debito = (
        f'=SE(E{r}<>"";'
        f'E{r}*{PISCOFINS_ALIQUOTA};'
        f'0)'
    )
    ws_saidas.cell(row=r, column=9).value = formula_piscofins_debito
    ws_saidas.cell(row=r, column=9).fill = Estilos.PREENCHIMENTO_PISCOFINS

# Adiciona tabela formatada
tab_saidas = Table(
    displayName="tbSaidas",
    ref=f"A{linha_atual_saidas}:{get_column_letter(MAX_COL_SAIDAS)}{linha_dados_inicio_saidas + QTD_LINHAS_PADRAO - 1}"
)
tab_saidas.tableStyleInfo = TableStyleInfo(
    name="TableStyleMedium2", 
    showFirstColumn=False,
    showLastColumn=False, 
    showRowStripes=True, 
    showColumnStripes=False
)
ws_saidas.add_table(tab_saidas)

# Valida√ß√£o de dados para % ICMS
configurar_validacao_dados(
    ws_saidas,
    f"F{linha_dados_inicio_saidas}:F{linha_dados_inicio_saidas + QTD_LINHAS_PADRAO - 1}",
    ALIQUOTAS_SAIDA,
    "% ICMS",
    "Valor inv√°lido! Selecione uma das al√≠quotas permitidas: 12% ou 19%"
)

# Valida√ß√£o de dados para Benef√≠cio PROTEGE
configurar_validacao_dados(
    ws_saidas,
    f"G{linha_dados_inicio_saidas}:G{linha_dados_inicio_saidas + QTD_LINHAS_PADRAO - 1}",
    ["Sim", "N√£o"],
    "Benef√≠cio PROTEGE",
    "Valor inv√°lido! Selecione 'Sim' ou 'N√£o'."
)

# Valida√ß√£o de dados para Compet√™ncia (mm/aaaa)
ws_saidas.add_data_validation(dv_competencia)
dv_competencia.add(f"B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas + QTD_LINHAS_PADRAO - 1}")

# Ajusta largura das colunas
ws_saidas.column_dimensions['A'].width = 14
ws_saidas.column_dimensions['B'].width = 18
ws_saidas.column_dimensions['C'].width = 12
ws_saidas.column_dimensions['D'].width = 30
ws_saidas.column_dimensions['E'].width = 18
ws_saidas.column_dimensions['F'].width = 10
ws_saidas.column_dimensions['G'].width = 25
ws_saidas.column_dimensions['H'].width = 20
ws_saidas.column_dimensions['I'].width = 25
ws_saidas.column_dimensions['J'].width = 30
ws_saidas.freeze_panes = f"A{linha_atual_saidas + 1}"

# =============================================================================
# ABA 3: APURA√á√ÉO MENSAL (ICMS e PIS/COFINS)
# =============================================================================
print("üìä Criando aba 'Apura√ß√£o Mensal'...")
ws_apuracao = wb.create_sheet("Apura√ß√£o Mensal")
linha_inicial_apuracao = adicionar_cabecalho_padrao(ws_apuracao, "APURA√á√ÉO MENSAL E RESULTADO")
linha_atual_apuracao = linha_inicial_apuracao

MESES = [
    "01/2024", "02/2024", "03/2024", "04/2024", "05/2024", "06/2024", 
    "07/2024", "08/2024", "09/2024", "10/2024", "11/2024", "12/2024"
]
COL_MES = 1 # Coluna A

# --- ICMS ---
ws_apuracao.merge_cells(f'A{linha_atual_apuracao}:L{linha_atual_apuracao}')
ws_apuracao[f'A{linha_atual_apuracao}'] = "ICMS - APURA√á√ÉO MENSAL E CR√âDITO ACUMULADO"
ws_apuracao[f'A{linha_atual_apuracao}'].font = Estilos.FONTE_TITULO_SECAO
ws_apuracao[f'A{linha_atual_apuracao}'].fill = Estilos.PREENCHIMENTO_TITULO_SECAO
ws_apuracao[f'A{linha_atual_apuracao}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
linha_atual_apuracao += 1

cabecalhos_icms = [
    "Compet√™ncia", "Cr√©ditos do M√™s (R$)", "D√©bitos do M√™s (R$)", "ICMS A Pagar (R$)", 
    "Cr√©dito do M√™s (R$)", "Saldo Inicial (R$)", "Saldo Final (R$)", 
    "ICMS Cheio (19%)", "ICMS Efetivo (11%)", "ICMS Desonerado", "PROTEGE a Pagar (R$)",
    "Cr√©dito a Transportar (R$)" # Coluna de resumo
]
COL_CREDITO_MES_ICMS = 2
COL_DEBITO_MES_ICMS = 3
COL_A_PAGAR_ICMS = 4
COL_CREDITO_MES_APURADO_ICMS = 5
COL_SALDO_INICIAL_ICMS = 6
COL_SALDO_FINAL_ICMS = 7
COL_ICMS_CHEIO = 8
COL_ICMS_EFETIVO = 9
COL_ICMS_DESONERADO = 10
COL_PROTEGE_ICMS = 11
COL_CREDITO_TRANSPORTAR_ICMS = 12

for col_num, cab in enumerate(cabecalhos_icms, 1):
    c = ws_apuracao.cell(row=linha_atual_apuracao, column=col_num, value=cab)
    c.font = Estilos.FONTE_CABECALHO
    c.fill = Estilos.PREENCHIMENTO_CABECALHO
    c.alignment = Estilos.ALINHAMENTO_CENTRO
    c.border = Estilos.BORDA_FINA
linha_atual_apuracao += 1
LINHA_INICIO_ICMS = linha_atual_apuracao

for i, mes in enumerate(MESES):
    r = LINHA_INICIO_ICMS + i
    
    # Coluna A: M√™s
    ws_apuracao.cell(row=r, column=COL_MES, value=mes).alignment = Estilos.ALINHAMENTO_CENTRO
    
    # Coluna B: Cr√©ditos do M√™s (ICMS)
    # =SOMARPRODUTO((Entradas!B:B=A{r})*(Entradas!I:I))
    formula_credito_icms = f'=SOMARPRODUTO((Entradas!B{linha_dados_inicio_entradas}:B{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=A{r})*(Entradas!I{linha_dados_inicio_entradas}:I{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}))'
    ws_apuracao.cell(row=r, column=COL_CREDITO_MES_ICMS, value=formula_credito_icms).number_format = '#,##0.00'
    
    # Coluna C: D√©bitos do M√™s (ICMS)
    # =SOMARPRODUTO((Sa√≠das!B:B=A{r})*(Sa√≠das!H:H))
    formula_debito_icms = f'=SOMARPRODUTO((Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=A{r})*(Sa√≠das!H{linha_dados_inicio_saidas}:H{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}))'
    ws_apuracao.cell(row=r, column=COL_DEBITO_MES_ICMS, value=formula_debito_icms).number_format = '#,##0.00'
    
    # Coluna F: Saldo Inicial
    if i == 0:
        formula_saldo_inicial_icms = '0'
    else:
        formula_saldo_inicial_icms = f'=G{r-1}'
    ws_apuracao.cell(row=r, column=COL_SALDO_INICIAL_ICMS, value=formula_saldo_inicial_icms).number_format = '#,##0.00'
    
    # Coluna D: ICMS A Pagar
    # =M√ÅXIMO(0; C{r} - B{r} - F{r})
    formula_a_pagar_icms = f'=M√ÅXIMO(0;C{r}-B{r}-F{r})'
    ws_apuracao.cell(row=r, column=COL_A_PAGAR_ICMS, value=formula_a_pagar_icms).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_A_PAGAR_ICMS).fill = Estilos.PREENCHIMENTO_ALERTA # Destaque para valor a pagar
    
    # Coluna E: Cr√©dito do M√™s (Cr√©dito Acumulado Gerado no M√™s)
    # =M√ÅXIMO(0; B{r} - C{r})
    formula_credito_mes_apurado_icms = f'=M√ÅXIMO(0;B{r}-C{r})'
    ws_apuracao.cell(row=r, column=COL_CREDITO_MES_APURADO_ICMS, value=formula_credito_mes_apurado_icms).number_format = '#,##0.00'
    
    # Coluna G: Saldo Final (Cr√©dito Acumulado)
    # =M√ÅXIMO(0; F{r} + E{r} - D{r})
    formula_saldo_final_icms = f'=M√ÅXIMO(0;F{r}+E{r}-D{r})'
    ws_apuracao.cell(row=r, column=COL_SALDO_FINAL_ICMS, value=formula_saldo_final_icms).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_SALDO_FINAL_ICMS).fill = Estilos.PREENCHIMENTO_DESTAQUE
    
    # Coluna H: ICMS Cheio (19%)
    # Soma do Valor da Nota * 19% para linhas com %ICMS=19 e Benef√≠cio=Sim
    formula_icms_cheio = (
        f'=SOMARPRODUTO('
        f'(Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=A{r})*'
        f'(Sa√≠das!F{linha_dados_inicio_saidas}:F{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}="19%")*'
        f'(Sa√≠das!G{linha_dados_inicio_saidas}:G{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}="Sim")*'
        f'(Sa√≠das!E{linha_dados_inicio_saidas}:E{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1})*'
        f'0.19'
        f')'
    )
    ws_apuracao.cell(row=r, column=COL_ICMS_CHEIO, value=formula_icms_cheio).number_format = '#,##0.00'
    
    # Coluna I: ICMS Efetivo (11%)
    # Soma do Valor da Nota * 11% para linhas com %ICMS=19 e Benef√≠cio=Sim
    formula_icms_efetivo = (
        f'=SOMARPRODUTO('
        f'(Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=A{r})*'
        f'(Sa√≠das!F{linha_dados_inicio_saidas}:F{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}="19%")*'
        f'(Sa√≠das!G{linha_dados_inicio_saidas}:G{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}="Sim")*'
        f'(Sa√≠das!E{linha_dados_inicio_saidas}:E{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1})*'
        f'0.11'
        f')'
    )
    ws_apuracao.cell(row=r, column=COL_ICMS_EFETIVO, value=formula_icms_efetivo).number_format = '#,##0.00'
    
    # Coluna J: ICMS Desonerado
    # ICMS Cheio - ICMS Efetivo (H{r} - I{r})
    formula_icms_desonerado = f'=H{r}-I{r}'
    ws_apuracao.cell(row=r, column=COL_ICMS_DESONERADO, value=formula_icms_desonerado).number_format = '#,##0.00'
    
    # Coluna K: PROTEGE a Pagar
    # ICMS Desonerado * 15% (J{r} * 0.15)
    formula_protege_icms = f'=J{r}*{PROTEGE_PERCENTUAL}'
    ws_apuracao.cell(row=r, column=COL_PROTEGE_ICMS, value=formula_protege_icms).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_PROTEGE_ICMS).fill = Estilos.PREENCHIMENTO_ALERTA # Destaque para valor a pagar
    
    # Coluna L: Cr√©dito a Transportar (Resumo)
    # =M√ÅXIMO(0; B{r} + F{r} - C{r})
    formula_credito_transportar_icms = f'=M√ÅXIMO(0;B{r}+F{r}-C{r})'
    ws_apuracao.cell(row=r, column=COL_CREDITO_TRANSPORTAR_ICMS, value=formula_credito_transportar_icms).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_CREDITO_TRANSPORTAR_ICMS).fill = Estilos.PREENCHIMENTO_DESTAQUE

linha_atual_apuracao = LINHA_INICIO_ICMS + len(MESES) + 2

# --- PIS/COFINS ---
ws_apuracao.merge_cells(f'A{linha_atual_apuracao}:G{linha_atual_apuracao}')
ws_apuracao[f'A{linha_atual_apuracao}'] = "PIS/COFINS - APURA√á√ÉO MENSAL E CR√âDITO ACUMULADO (9,60%)"
ws_apuracao[f'A{linha_atual_apuracao}'].font = Estilos.FONTE_TITULO_SECAO
ws_apuracao[f'A{linha_atual_apuracao}'].fill = Estilos.PREENCHIMENTO_PISCOFINS
ws_apuracao[f'A{linha_atual_apuracao}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
linha_atual_apuracao += 1

cabecalhos_piscofins = [
    "Compet√™ncia", "Cr√©ditos do M√™s (R$)", "D√©bitos do M√™s (R$)", "PIS/COFINS A Pagar (R$)", 
    "Cr√©dito do M√™s (R$)", "Saldo Inicial (R$)", "Saldo Final (R$)"
]
COL_CREDITO_MES_PISCOFINS = 2
COL_DEBITO_MES_PISCOFINS = 3
COL_A_PAGAR_PISCOFINS = 4
COL_CREDITO_MES_APURADO_PISCOFINS = 5
COL_SALDO_INICIAL_PISCOFINS = 6
COL_SALDO_FINAL_PISCOFINS = 7

# Ajusta as colunas para a se√ß√£o PIS/COFINS
COL_PISCOFINS_OFFSET = 0 # Mant√©m as colunas A-G

for col_num, cab in enumerate(cabecalhos_piscofins, 1):
    c = ws_apuracao.cell(row=linha_atual_apuracao, column=col_num + COL_PISCOFINS_OFFSET, value=cab)
    c.font = Estilos.FONTE_CABECALHO
    c.fill = Estilos.PREENCHIMENTO_PISCOFINS
    c.alignment = Estilos.ALINHAMENTO_CENTRO
    c.border = Estilos.BORDA_FINA
linha_atual_apuracao += 1
LINHA_INICIO_PISCOFINS = linha_atual_apuracao

for i, mes in enumerate(MESES):
    r = LINHA_INICIO_PISCOFINS + i
    
    # Coluna A: M√™s
    ws_apuracao.cell(row=r, column=COL_MES, value=mes).alignment = Estilos.ALINHAMENTO_CENTRO
    
    # Coluna B: Cr√©ditos do M√™s (PIS/COFINS)
    formula_credito_piscofins = f'=SOMARPRODUTO((Entradas!B{linha_dados_inicio_entradas}:B{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=A{r})*(Entradas!J{linha_dados_inicio_entradas}:J{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}))'
    ws_apuracao.cell(row=r, column=COL_CREDITO_MES_PISCOFINS, value=formula_credito_piscofins).number_format = '#,##0.00'
    
    # Coluna C: D√©bitos do M√™s (PIS/COFINS)
    formula_debito_piscofins = f'=SOMARPRODUTO((Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=A{r})*(Sa√≠das!I{linha_dados_inicio_saidas}:I{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}))'
    ws_apuracao.cell(row=r, column=COL_DEBITO_MES_PISCOFINS, value=formula_debito_piscofins).number_format = '#,##0.00'
    
    # Coluna F: Saldo Inicial
    if i == 0:
        formula_saldo_inicial_piscofins = '0'
    else:
        formula_saldo_inicial_piscofins = f'=G{r-1}'
    ws_apuracao.cell(row=r, column=COL_SALDO_INICIAL_PISCOFINS, value=formula_saldo_inicial_piscofins).number_format = '#,##0.00'
    
    # Coluna D: PIS/COFINS A Pagar
    # =M√ÅXIMO(0; C{r} - B{r} - F{r})
    formula_a_pagar_piscofins = f'=M√ÅXIMO(0;C{r}-B{r}-F{r})'
    ws_apuracao.cell(row=r, column=COL_A_PAGAR_PISCOFINS, value=formula_a_pagar_piscofins).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_A_PAGAR_PISCOFINS).fill = Estilos.PREENCHIMENTO_ALERTA
    
    # Coluna E: Cr√©dito do M√™s (Cr√©dito Acumulado Gerado no M√™s)
    # =M√ÅXIMO(0; B{r} - C{r})
    formula_credito_mes_apurado_piscofins = f'=M√ÅXIMO(0;B{r}-C{r})'
    ws_apuracao.cell(row=r, column=COL_CREDITO_MES_APURADO_PISCOFINS, value=formula_credito_mes_apurado_piscofins).number_format = '#,##0.00'
    
    # Coluna G: Saldo Final (Cr√©dito Acumulado)
    # =M√ÅXIMO(0; F{r} + E{r} - D{r})
    formula_saldo_final_piscofins = f'=M√ÅXIMO(0;F{r}+E{r}-D{r})'
    ws_apuracao.cell(row=r, column=COL_SALDO_FINAL_PISCOFINS, value=formula_saldo_final_piscofins).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_SALDO_FINAL_PISCOFINS).fill = Estilos.PREENCHIMENTO_DESTAQUE

linha_atual_apuracao = LINHA_INICIO_PISCOFINS + len(MESES) + 2

# --- RESULTADO MENSAL (LUCRO/PREJU√çZO) ---
ws_apuracao.merge_cells(f'A{linha_atual_apuracao}:G{linha_atual_apuracao}')
ws_apuracao[f'A{linha_atual_apuracao}'] = "RESULTADO MENSAL (LUCRO/PREJU√çZO)"
ws_apuracao[f'A{linha_atual_apuracao}'].font = Estilos.FONTE_TITULO_SECAO
ws_apuracao[f'A{linha_atual_apuracao}'].fill = Estilos.PREENCHIMENTO_TITULO_SECAO
ws_apuracao[f'A{linha_atual_apuracao}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
linha_atual_apuracao += 1

cabecalhos_resultado = [
    "Compet√™ncia", "Receita Bruta (R$)", "CMV (R$)", "Despesas Operacionais (R$)", 
    "Tributos a Pagar (R$)", "Resultado do M√™s (R$)", "Resultado Acumulado (R$)"
]
COL_RECEITA_BRUTA = 2
COL_CMV = 3
COL_DESPESAS = 4
COL_TRIBUTOS_A_PAGAR = 5
COL_RESULTADO_MES = 6
COL_RESULTADO_ACUMULADO = 7

for col_num, cab in enumerate(cabecalhos_resultado, 1):
    c = ws_apuracao.cell(row=linha_atual_apuracao, column=col_num, value=cab)
    c.font = Estilos.FONTE_CABECALHO
    c.fill = Estilos.PREENCHIMENTO_CABECALHO
    c.alignment = Estilos.ALINHAMENTO_CENTRO
    c.border = Estilos.BORDA_FINA
linha_atual_apuracao += 1
LINHA_INICIO_RESULTADO = linha_atual_apuracao

for i, mes in enumerate(MESES):
    r = LINHA_INICIO_RESULTADO + i
    
    # Coluna A: M√™s
    ws_apuracao.cell(row=r, column=COL_MES, value=mes).alignment = Estilos.ALINHAMENTO_CENTRO
    
    # Coluna B: Receita Bruta
    # =SOMARPRODUTO((Sa√≠das!B:B=A{r})*(Sa√≠das!E:E))
    formula_receita_bruta = f'=SOMARPRODUTO((Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=A{r})*(Sa√≠das!E{linha_dados_inicio_saidas}:E{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}))'
    ws_apuracao.cell(row=r, column=COL_RECEITA_BRUTA, value=formula_receita_bruta).number_format = '#,##0.00'
    
    # Coluna C: CMV (AGORA AUTOM√ÅTICO)
    # =SOMARPRODUTO((Entradas!B:B=A{r})*(Entradas!G:G="Compra de Mercadoria")*(Entradas!F:F))
    # Soma o Custo da Mercadoria (Coluna F) das Entradas, filtrando por Compet√™ncia (Coluna B) e Classifica√ß√£o (Coluna G) = "Compra de Mercadoria"
    formula_cmv = (
        f'=SOMARPRODUTO('
        f'(Entradas!B{linha_dados_inicio_entradas}:B{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=A{r})*'
        f'(Entradas!G{linha_dados_inicio_entradas}:G{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}="Compra de Mercadoria")*'
        f'(Entradas!F{linha_dados_inicio_entradas}:F{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1})'
        f')'
    )
    ws_apuracao.cell(row=r, column=COL_CMV, value=formula_cmv).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_CMV).fill = Estilos.PREENCHIMENTO_TOTAL # N√£o √© mais edit√°vel
    
    # Coluna D: Despesas Operacionais (Edit√°vel)
    ws_apuracao.cell(row=r, column=COL_DESPESAS).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_DESPESAS).fill = Estilos.PREENCHIMENTO_EDITAVEL
    
    # Coluna E: Tributos a Pagar
    # ICMS A Pagar (D da tabela ICMS) + PIS/COFINS A Pagar (D da tabela PIS/COFINS) + PROTEGE a Pagar (K da tabela ICMS)
    linha_icms = LINHA_INICIO_ICMS + i
    linha_piscofins = LINHA_INICIO_PISCOFINS + i
    formula_tributos = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_A_PAGAR_ICMS)}{linha_icms}+\'Apura√ß√£o Mensal\'!{get_column_letter(COL_A_PAGAR_PISCOFINS)}{linha_piscofins}+\'Apura√ß√£o Mensal\'!{get_column_letter(COL_PROTEGE_ICMS)}{linha_icms}'
    ws_apuracao.cell(row=r, column=COL_TRIBUTOS_A_PAGAR, value=formula_tributos).number_format = '#,##0.00'
    
    # Coluna F: Resultado do M√™s
    # Receita Bruta - CMV - Despesas - Tributos a Pagar
    formula_resultado_mes = f'=B{r}-C{r}-D{r}-E{r}'
    ws_apuracao.cell(row=r, column=COL_RESULTADO_MES, value=formula_resultado_mes).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_RESULTADO_MES).fill = Estilos.PREENCHIMENTO_TOTAL
    
    # Coluna G: Resultado Acumulado
    if i == 0:
        formula_resultado_acumulado = f'=F{r}'
    else:
        formula_resultado_acumulado = f'=G{r-1}+F{r}'
    ws_apuracao.cell(row=r, column=COL_RESULTADO_ACUMULADO, value=formula_resultado_acumulado).number_format = '#,##0.00'
    ws_apuracao.cell(row=r, column=COL_RESULTADO_ACUMULADO).fill = Estilos.PREENCHIMENTO_DESTAQUE

# Ajusta largura das colunas
ws_apuracao.column_dimensions['A'].width = 18
ws_apuracao.column_dimensions['B'].width = 20
ws_apuracao.column_dimensions['C'].width = 20
ws_apuracao.column_dimensions['D'].width = 25
ws_apuracao.column_dimensions['E'].width = 25
ws_apuracao.column_dimensions['F'].width = 25
ws_apuracao.column_dimensions['G'].width = 25
ws_apuracao.column_dimensions['H'].width = 20
ws_apuracao.column_dimensions['I'].width = 20
ws_apuracao.column_dimensions['J'].width = 20
ws_apuracao.column_dimensions['K'].width = 25
ws_apuracao.column_dimensions['L'].width = 25
ws_apuracao.freeze_panes = f"A{linha_inicial_apuracao + 1}"

# =============================================================================
# ABA 4: RESUMO & GUIA (Atualizada)
# =============================================================================
print("üìä Criando aba 'Resumo & Guia'...")
ws_resumo = wb.create_sheet("Resumo & Guia")
linha_inicial_resumo = adicionar_cabecalho_padrao(ws_resumo, "RESUMO EXECUTIVO E GUIA")
linha_atual_resumo = linha_inicial_resumo + 1

# --- RESUMO EXECUTIVO - VALORES FINAIS (√öLTIMO M√äS APURADO) ---
ws_resumo.merge_cells(f'A{linha_atual_resumo}:E{linha_atual_resumo}')
ws_resumo[f'A{linha_atual_resumo}'] = "RESUMO EXECUTIVO - VALORES FINAIS (√öLTIMO M√äS APURADO)"
ws_resumo[f'A{linha_atual_resumo}'].font = Font(name='Calibri', size=16, bold=True, color="FFFFFF")
ws_resumo[f'A{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_CABECALHO
ws_resumo[f'A{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_CENTRO
linha_atual_resumo += 2

ws_resumo[f'A{linha_atual_resumo}'] = "Item"
ws_resumo[f'B{linha_atual_resumo}'] = "Valor (R$)"
ws_resumo[f'A{linha_atual_resumo}'].font = Font(bold=True)
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True)
ws_resumo[f'B{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_DIREITA
linha_atual_resumo += 1

# Refer√™ncias para o √∫ltimo m√™s (Dezembro)
LINHA_FINAL_ICMS = LINHA_INICIO_ICMS + len(MESES) - 1
LINHA_FINAL_PISCOFINS = LINHA_INICIO_PISCOFINS + len(MESES) - 1
LINHA_FINAL_RESULTADO = LINHA_INICIO_RESULTADO + len(MESES) - 1

# ICMS A Pagar
ws_resumo[f'A{linha_atual_resumo}'] = "ICMS A PAGAR (M√™s)"
formula_icms_pagar = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_A_PAGAR_ICMS)}{LINHA_FINAL_ICMS}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_icms_pagar
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=14, color="FFFFFF")
ws_resumo[f'B{linha_atual_resumo}'].fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_DUPLA_BAIXO
linha_atual_resumo += 1

# PROTEGE A Pagar
ws_resumo[f'A{linha_atual_resumo}'] = "PROTEGE A PAGAR (15%) (M√™s)"
formula_protege_pagar = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_PROTEGE_ICMS)}{LINHA_FINAL_ICMS}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_protege_pagar
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=14, color="FFFFFF")
ws_resumo[f'B{linha_atual_resumo}'].fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_DUPLA_BAIXO
linha_atual_resumo += 1

# PIS/COFINS A Pagar
ws_resumo[f'A{linha_atual_resumo}'] = "PIS/COFINS A PAGAR (M√™s)"
formula_piscofins_pagar = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_A_PAGAR_PISCOFINS)}{LINHA_FINAL_PISCOFINS}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_piscofins_pagar
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=14, color="FFFFFF")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_PISCOFINS
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_DUPLA_BAIXO
linha_atual_resumo += 1

# Cr√©dito ICMS a Transportar
ws_resumo[f'A{linha_atual_resumo}'] = "ICMS Cr√©dito a Transportar (Saldo Final)"
formula_icms_credito_final = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_SALDO_FINAL_ICMS)}{LINHA_FINAL_ICMS}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_icms_credito_final
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=11)
ws_resumo[f'B{linha_atual_resumo}'].fill = PatternFill(start_color="FFC000", end_color="FFC000", fill_type="solid")
linha_atual_resumo += 1

# Cr√©dito PIS/COFINS a Transportar
ws_resumo[f'A{linha_atual_resumo}'] = "PIS/COFINS Cr√©dito a Transportar (Saldo Final)"
formula_piscofins_credito_final = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_SALDO_FINAL_PISCOFINS)}{LINHA_FINAL_PISCOFINS}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_piscofins_credito_final
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=11)
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_PISCOFINS
linha_atual_resumo += 3

# Resultado Acumulado
ws_resumo[f'A{linha_atual_resumo}'] = "RESULTADO ACUMULADO NO ANO (Lucro/Preju√≠zo)"
formula_resultado_acumulado_final = f'=\'Apura√ß√£o Mensal\'!{get_column_letter(COL_RESULTADO_ACUMULADO)}{LINHA_FINAL_RESULTADO}'
ws_resumo[f'B{linha_atual_resumo}'] = formula_resultado_acumulado_final
ws_resumo[f'B{linha_atual_resumo}'].number_format = '#,##0.00'
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, size=14, color="FFFFFF")
ws_resumo[f'B{linha_atual_resumo}'].fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_DUPLA_BAIXO
linha_atual_resumo += 3

# --- AUDITORIA & ALERTAS (Resumo) ---
ws_resumo.merge_cells(f'A{linha_atual_resumo}:E{linha_atual_resumo}')
ws_resumo[f'A{linha_atual_resumo}'] = "AUDITORIA & ALERTAS"
ws_resumo[f'A{linha_atual_resumo}'].font = Estilos.FONTE_TITULO_SECAO
ws_resumo[f'A{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_TITULO_SECAO
ws_resumo[f'A{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
linha_atual_resumo += 1

ws_resumo[f'A{linha_atual_resumo}'] = "Verifica√ß√£o"
ws_resumo[f'B{linha_atual_resumo}'] = "Status"
ws_resumo[f'A{linha_atual_resumo}'].font = Font(bold=True)
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True)
ws_resumo[f'B{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_CENTRO
linha_atual_resumo += 1

# Alerta: Benef√≠cio PROTEGE marcado com al√≠quota diferente de 19%
ws_resumo[f'A{linha_atual_resumo}'] = "Benef√≠cio PROTEGE marcado com % ‚â† 19%"
formula_alerta_protege = (
    f'=SE(SOMARPRODUTO(--(Sa√≠das!G{linha_dados_inicio_saidas}:G{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}="Sim");'
    f'--(Sa√≠das!F{linha_dados_inicio_saidas}:F{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}<>"19%"))>0;'
    f'"‚ö† ERRO: Verificar! (Linhas na aba Sa√≠das)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_protege
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

# Alerta: Compet√™ncia (mm/aaaa) ausente onde Valor da Nota est√° preenchido
ws_resumo[f'A{linha_atual_resumo}'] = "Compet√™ncia (mm/aaaa) ausente (Entradas)"
formula_alerta_comp_entrada = (
    f'=SE(SOMARPRODUTO(--(Entradas!E{linha_dados_inicio_entradas}:E{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}>0);'
    f'--(Entradas!B{linha_dados_inicio_entradas}:B{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=""))>0;'
    f'"‚ö† ERRO: Preencher! (Linhas na aba Entradas)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_comp_entrada
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

ws_resumo[f'A{linha_atual_resumo}'] = "Compet√™ncia (mm/aaaa) ausente (Sa√≠das)"
formula_alerta_comp_saida = (
    f'=SE(SOMARPRODUTO(--(Sa√≠das!E{linha_dados_inicio_saidas}:E{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}>0);'
    f'--(Sa√≠das!B{linha_dados_inicio_saidas}:B{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=""))>0;'
    f'"‚ö† ERRO: Preencher! (Linhas na aba Sa√≠das)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_comp_saida
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

# Alerta: Classifica√ß√£o ausente em Entradas
ws_resumo[f'A{linha_atual_resumo}'] = "Classifica√ß√£o ausente (Entradas)"
formula_alerta_classificacao = (
    f'=SE(SOMARPRODUTO(--(Entradas!E{linha_dados_inicio_entradas}:E{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}>0);'
    f'--(Entradas!G{linha_dados_inicio_entradas}:G{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=""))>0;'
    f'"‚ö† ERRO: Preencher! (Linhas na aba Entradas)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_classificacao
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

# Alerta: Data ausente em Entradas
ws_resumo[f'A{linha_atual_resumo}'] = "Data ausente (Entradas)"
formula_alerta_data_entrada = (
    f'=SE(SOMARPRODUTO(--(Entradas!E{linha_dados_inicio_entradas}:E{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}>0);'
    f'--(Entradas!A{linha_dados_inicio_entradas}:A{linha_dados_inicio_entradas+QTD_LINHAS_PADRAO-1}=""))>0;'
    f'"‚ö† ERRO: Preencher! (Linhas na aba Entradas)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_data_entrada
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

# Alerta: Data ausente em Sa√≠das
ws_resumo[f'A{linha_atual_resumo}'] = "Data ausente (Sa√≠das)"
formula_alerta_data_saida = (
    f'=SE(SOMARPRODUTO(--(Sa√≠das!E{linha_dados_inicio_saidas}:E{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}>0);'
    f'--(Sa√≠das!A{linha_dados_inicio_saidas}:A{linha_dados_inicio_saidas+QTD_LINHAS_PADRAO-1}=""))>0;'
    f'"‚ö† ERRO: Preencher! (Linhas na aba Sa√≠das)","‚úì OK")'
)
ws_resumo[f'B{linha_atual_resumo}'] = formula_alerta_data_saida
ws_resumo[f'B{linha_atual_resumo}'].font = Font(bold=True, color="C00000")
ws_resumo[f'B{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_ALERTA
ws_resumo[f'B{linha_atual_resumo}'].border = Estilos.BORDA_FINA
linha_atual_resumo += 1

# --- INSTRU√á√ïES DE USO (Atualizadas) ---
linha_atual_resumo += 2
ws_resumo.merge_cells(f'A{linha_atual_resumo}:E{linha_atual_resumo}')
ws_resumo[f'A{linha_atual_resumo}'] = "INSTRU√á√ïES DE USO"
ws_resumo[f'A{linha_atual_resumo}'].font = Estilos.FONTE_TITULO_SECAO
ws_resumo[f'A{linha_atual_resumo}'].fill = Estilos.PREENCHIMENTO_TITULO_SECAO
ws_resumo[f'A{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
linha_atual_resumo += 2

instrucoes = [
    "1. Preencha as abas 'Entradas' e 'Sa√≠das' com as notas fiscais do ano, preenchendo a 'Compet√™ncia (mm/aaaa)' em todas as linhas.",
    "2. C√©lulas AMARELAS s√£o edit√°veis; c√©lulas com f√≥rmulas (brancas ou coloridas) est√£o protegidas.",
    "3. Na aba 'Entradas', a coluna 'Classifica√ß√£o' √© obrigat√≥ria e define o direito ao cr√©dito de ICMS e PIS/COFINS (somente 'Compra de Mercadoria' gera cr√©dito).",
    "4. **NOVO:** Na aba 'Entradas', preencha a coluna **'Custo da Mercadoria (R$)'** para as notas de compra. Este valor ser√° usado para o c√°lculo autom√°tico do CMV.",
    "5. Na aba 'Sa√≠das', marque 'Sim' em 'Benef√≠cio PROTEGE' APENAS para vendas com al√≠quota 19% que se enquadram. Marcar 'Sim' com outra al√≠quota gerar√° um ALERTA.",
    "6. A aba 'Apura√ß√£o Mensal' consolida automaticamente os valores m√™s a m√™s, calculando o ICMS, PIS/COFINS e o Resultado (Lucro/Preju√≠zo).",
    "7. **NOVO:** O **CMV (Custo da Mercadoria Vendida)** √© calculado automaticamente na aba 'Apura√ß√£o Mensal' somando o 'Custo da Mercadoria' das notas de entrada classificadas como 'Compra de Mercadoria' por compet√™ncia.",
    "8. Preencha apenas as **'Despesas Operacionais'** na aba 'Apura√ß√£o Mensal' para completar o c√°lculo do Resultado.",
    "9. Verifique os alertas na se√ß√£o 'Auditoria & Alertas' (nesta aba) para garantir a corre√ß√£o dos dados.",
    "10. Os valores finais (ICMS, PIS/COFINS e PROTEGE a pagar) e o Resultado Acumulado s√£o exibidos no topo desta aba (Resumo & Guia).",
    "IMPORTANTE: O PROTEGE √© sempre 15% do ICMS desonerado, conforme legisla√ß√£o vigente e √© IMUT√ÅVEL."
]

for inst in instrucoes:
    ws_resumo.merge_cells(f'A{linha_atual_resumo}:E{linha_atual_resumo}')
    ws_resumo[f'A{linha_atual_resumo}'] = inst
    ws_resumo[f'A{linha_atual_resumo}'].alignment = Estilos.ALINHAMENTO_ESQUERDA
    if "IMPORTANTE" in inst:
        ws_resumo[f'A{linha_atual_resumo}'].font = Font(bold=True, color="FF0000")
    ws_resumo.row_dimensions[linha_atual_resumo].height = 15
    linha_atual_resumo += 1

ws_resumo.column_dimensions['A'].width = 40
ws_resumo.column_dimensions['B'].width = 25
ws_resumo.column_dimensions['C'].width = 15
ws_resumo.column_dimensions['D'].width = 15
ws_resumo.column_dimensions['E'].width = 15
ws_resumo.freeze_panes = f"A{linha_inicial_resumo + 1}"

# =============================================================================
# PROTE√á√ÉO DE C√âLULAS (SEM PROTE√á√ÉO DE PLANILHA COMPLETA)
# =============================================================================
print("üîí Aplicando prote√ß√£o de c√©lulas (apenas f√≥rmulas bloqueadas)...")

# Colunas de f√≥rmula na aba Entradas: I, J, K (9, 10, 11)
colunas_formula_entradas_idx = [9, 10, 11]
colunas_editaveis_entradas_idx = [1, 2, 3, 4, 5, 6, 7, 8, 12]
proteger_celulas_formula(
    ws_entradas, 
    linha_dados_inicio_entradas, 
    QTD_LINHAS_PADRAO, 
    colunas_formula=colunas_formula_entradas_idx,
    colunas_editaveis=colunas_editaveis_entradas_idx,
    max_col=MAX_COL_ENTRADAS
)

# Colunas de f√≥rmula na aba Sa√≠das: H, I (8, 9)
colunas_formula_saidas_idx = [8, 9]
colunas_editaveis_saidas_idx = [1, 2, 3, 4, 5, 6, 7, 10]
proteger_celulas_formula(
    ws_saidas, 
    linha_dados_inicio_saidas, 
    QTD_LINHAS_PADRAO, 
    colunas_formula=colunas_formula_saidas_idx,
    colunas_editaveis=colunas_editaveis_saidas_idx,
    max_col=MAX_COL_SAIDAS
)

# Colunas edit√°veis na aba Apura√ß√£o Mensal: Despesas Operacionais (4) na se√ß√£o Resultado
LINHA_FIM_RESULTADO = LINHA_INICIO_RESULTADO + len(MESES) - 1
for r in range(LINHA_INICIO_RESULTADO, LINHA_FIM_RESULTADO + 1):
    # CMV (COL_CMV = 3) agora √© f√≥rmula, ent√£o s√≥ Despesas Operacionais √© edit√°vel
    ws_apuracao.cell(row=r, column=COL_DESPESAS).protection = Protection(locked=False)

# Bloqueia as c√©lulas de f√≥rmula na Apura√ß√£o Mensal
colunas_formula_apuracao = [
    COL_CREDITO_MES_ICMS, COL_DEBITO_MES_ICMS, COL_A_PAGAR_ICMS, COL_CREDITO_MES_APURADO_ICMS, COL_SALDO_INICIAL_ICMS, COL_SALDO_FINAL_ICMS, 
    COL_ICMS_CHEIO, COL_ICMS_EFETIVO, COL_ICMS_DESONERADO, COL_PROTEGE_ICMS, COL_CREDITO_TRANSPORTAR_ICMS,
    COL_CREDITO_MES_PISCOFINS, COL_DEBITO_MES_PISCOFINS, COL_A_PAGAR_PISCOFINS, COL_CREDITO_MES_APURADO_PISCOFINS, COL_SALDO_INICIAL_PISCOFINS, COL_SALDO_FINAL_PISCOFINS,
    COL_RECEITA_BRUTA, COL_CMV, COL_TRIBUTOS_A_PAGAR, COL_RESULTADO_MES, COL_RESULTADO_ACUMULADO
]
for r in range(LINHA_INICIO_ICMS, LINHA_INICIO_ICMS + len(MESES)):
    for c in colunas_formula_apuracao:
        ws_apuracao.cell(row=r, column=c).protection = Protection(locked=True)
for r in range(LINHA_INICIO_PISCOFINS, LINHA_INICIO_PISCOFINS + len(MESES)):
    for c in colunas_formula_apuracao:
        ws_apuracao.cell(row=r, column=c).protection = Protection(locked=True)
for r in range(LINHA_INICIO_RESULTADO, LINHA_INICIO_RESULTADO + len(MESES)):
    for c in colunas_formula_apuracao:
        ws_apuracao.cell(row=r, column=c).protection = Protection(locked=True)

# =============================================================================
# SALVAR ARQUIVO
# =============================================================================
print("üíæ Salvando arquivo...")
try:
    wb.save(CAMINHO_COMPLETO)
    print("\n" + "="*70)
    print("‚úÖ PLANILHA CRIADA COM SUCESSO!")
    print("="*70)
    print(f"üìÅ Local: {CAMINHO_COMPLETO}")
    print(f"üìä Abas criadas: Entradas | Sa√≠das | Apura√ß√£o Mensal | Resumo & Guia")
    print(f"üî¢ PROTEGE fixado em: {PROTEGE_PERCENTUAL*100}% (imut√°vel)")
    print(f"üî¢ PIS/COFINS fixado em: {PISCOFINS_ALIQUOTA*100}% (imut√°vel)")
    print(f"üîí Prote√ß√£o aplicada: F√≥rmulas bloqueadas, c√©lulas amarelas edit√°veis")
    print(f"‚úì Valida√ß√µes configuradas (dropdown nas al√≠quotas, classifica√ß√£o e Sim/N√£o)")
    print(f"‚úì Apura√ß√£o Mensal (ICMS, PIS/COFINS e Resultado) implementada")
    print(f"‚úì {QTD_LINHAS_PADRAO} linhas preparadas para entrada de dados em Entradas e Sa√≠das")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("   1. Abra o arquivo no Excel ou LibreOffice")
    print("   2. Preencha as abas 'Entradas' e 'Sa√≠das' (c√©lulas amarelas)")
    print("   3. Preencha Despesas Operacionais na aba 'Apura√ß√£o Mensal'")
    print("   4. Consulte os resultados finais na aba 'Resumo & Guia' e 'Apura√ß√£o Mensal'")
    print("   5. Verifique os alertas na aba 'Resumo & Guia'")
    print("="*70)
    print("\n‚ú® Script executado com sucesso!")
    
except PermissionError:
    print("\n" + "="*70)
    print("‚ùå ERRO: Permiss√£o negada!")
    print("="*70)
    print("‚ö† O arquivo pode estar aberto no Excel/LibreOffice.")
    print("üí° SOLU√á√ÉO:")
    print(f"   1. Feche o arquivo '{NOME_ARQUIVO}' se estiver aberto")
    print("   2. Execute o script novamente")
    print("="*70)
    
except FileNotFoundError:
    print("\n" + "="*70)
    print("‚ùå ERRO: Caminho n√£o encontrado!")
    print("="*70)
    print(f"‚ö† O diret√≥rio '{CAMINHO_SAIDA}' n√£o existe ou n√£o √© acess√≠vel.")
    print("üí° SOLU√á√ÉO:")
    print(f"   1. Verifique se o diret√≥rio existe ou altere CAMINHO_SAIDA no script")
    print("   2. No seu ambiente Windows, o caminho deve ser ajustado para: CAMINHO_SAIDA = \"U:\\\\ACOMPANHAMENTO GH\"")
    print("="*70)
    
except Exception as e:
    print("\n" + "="*70)
    print("‚ùå ERRO INESPERADO!")
    print("="*70)
    print(f"Detalhes: {type(e).__name__}: {e}")
    print("\nüí° POSS√çVEIS CAUSAS:")
    print("   ‚Ä¢ Falta de permiss√£o de escrita no diret√≥rio")
    print("   ‚Ä¢ Espa√ßo em disco insuficiente")
    print("   ‚Ä¢ Caminho com caracteres especiais inv√°lidos")
    print("   ‚Ä¢ Biblioteca openpyxl desatualizada")
    print("\nüí° SOLU√á√ÉO:")
    print("   1. Verifique as permiss√µes do diret√≥rio")
    print("   2. Atualize: pip install --upgrade openpyxl")
    print("   3. Tente salvar em outro local")
    print("="*70)
